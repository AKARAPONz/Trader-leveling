<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Trade · Trader Leveling</title>
  <link href="/css/minimal.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://s3.tradingview.com/tv.js"></script>
  <style>
    :root { --primary-color: #0d6efd; }
    #buyBtn { background-color: #16a34a; color: white; border: none; }
    #buyBtn:hover { background-color: #15803d; }
    #sellBtn { background-color: #dc2626; color: white; border: none; }
    #sellBtn:hover { background-color: #b91c1c; }
    .btn-group .btn { flex: 1; }
    .trade-item, .position-item { padding: 0.75rem; border-bottom: 1px solid #e2e8f0; margin-bottom: 0.5rem; }
    .trade-item:last-child, .position-item:last-child { border-bottom: none; margin-bottom: 0; }
    .badge { font-size: 0.75rem; padding: 0.25rem 0.5rem; }
    .badge-success { background-color: #10b981; color: white; }
    .badge-danger { background-color: #ef4444; color: white; }
    .badge-primary { background-color: #3b82f6; color: white; }
    .badge-primary { background-color: #3b82f6; color: white; }   /* BUY OPEN */
    .badge-warning { background-color: #f59e0b; color: white; }   /* SELL OPEN */
    .badge-success { background-color: #10b981; color: white; }   /* CLOSE-BUY */
    .badge-danger  { background-color: #ef4444; color: white; }   /* CLOSE-SELL */
  </style>
</head>
<body data-has-tournament="<%= tournament ? 'true' : 'false' %>" 
      data-tournament-id="<%= tournament ? tournament._id : '' %>">

  <!-- Sidebar: เมนูด้านข้าง -->
  <div class="sidebar-trigger"></div>
  <div class="sidebar">
    <div class="sidebar-header">
      <a href="/" class="brand"><i class="bi bi-graph-up-arrow"></i> Trader Leveling</a>
    </div>
    <nav class="nav-menu">
      <div class="nav-item"><a href="/" class="nav-link"><i class="bi bi-house-door"></i> Home</a></div>
      <div class="nav-item"><a href="/dashboard" class="nav-link"><i class="bi bi-grid-1x2"></i> Dashboard</a></div>
      <div class="nav-item"><a href="/tournament" class="nav-link"><i class="bi bi-trophy"></i> Tournament</a></div>
      <div class="nav-item"><a href="/trade" class="nav-link active"><i class="bi bi-graph-up"></i> Trade</a></div>
      <div class="nav-item"><a href="/profile" class="nav-link"><i class="bi bi-person"></i> Profile</a></div>
      <% if (user.role === 'admin') { %>
      <div class="nav-item"><a href="/admin/users" class="nav-link"><i class="bi bi-people"></i> Users</a></div>
      <% } %>
    </nav>
    <div class="sidebar-footer">
      <div class="auth-buttons">
        <% if (loggedIn) { %>
          <a href="/logout" class="btn btn-primary"><i class="bi bi-box-arrow-right"></i> Logout</a>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main">
    <div class="topbar">
      <div class="user-info">
        <div class="user-details">
          <h4>Trade</h4>
          <small>
            Level: <span id="userLevel"><%= user.level || 'N/A' %></span> | 
            EXP: <span id="userExp"><%= user.exp || 0 %></span> | 
            Role: <span class="badge badge-<%= user.role === 'admin' ? 'danger' : user.role === 'trader' ? 'success' : 'secondary' %>"><%= user.role || 'Guest' %></span> | 
            @<%= user.username || 'Guest' %> <br/>
            <%= new Date().toLocaleDateString('en-GB', { weekday: 'short', day: '2-digit', month: 'short', year: 'numeric' }) %>
          </small>
        </div>
      </div>
      <img src="<%= user.profileImage + '?v=' + Date.now() %>" class="avatar" alt="Profile" />
    </div>

    <div class="content">
      <% if (error) { %>
        <div class="alert alert-warning"><i class="bi bi-exclamation-triangle"></i> <%= error %></div>
      <% } else if (tournament) { %>

      <!-- Tournament Info -->
      <div class="card mb-4">
        <div class="card-header">
          <h5><i class="bi bi-trophy"></i> Tournament: <%= tournament.name %></h5>
          <small class="text-muted">Balance: $<%= Number(userBalance).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) %></small>
        </div>
        <div class="card-body d-flex justify-content-between">
          <div><strong>Status:</strong> 
            <% if (tournamentStatus === 'RUNNING') { %>
              <span class="badge badge-success">RUNNING</span>
            <% } else if (tournamentStatus === 'END') { %>
              <span class="badge badge-secondary">END</span>
            <% } else { %>
              <span class="badge badge-primary">REGISTRATION</span>
            <% } %>
          </div>
          <div><strong>Time Left:</strong> <span id="timeLeft">Loading...</span></div>
        </div>
      </div>

      <div class="row">
        <!-- Chart -->
        <div class="col-8">
          <div class="card mb-4">
            <div class="card-header"><h5><i class="bi bi-graph-up"></i> Trading Chart</h5></div>
            <div class="card-body"><div id="dynamic-graph" style="height:500px; width:100%;"></div></div>
          </div>
        </div>

        <!-- Trade Panel -->
        <div class="col-4">
          <div class="card mb-4">
            <div class="card-header"><h5><i class="bi bi-currency-exchange"></i> Trade Panel</h5></div>
            <div class="card-body">
              <form id="tradeForm">
                <input type="hidden" name="tournamentId" value="<%= tournament._id %>">
                <input type="hidden" name="type" value="market">
                <input type="hidden" id="symbolInput" name="symbol" value="BTCUSDT">

                <div class="mb-3">
                  <label>Symbol</label>
                  <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="setSymbol('BTCUSDT', this)">BTC</button>
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="setSymbol('ETHUSDT', this)">ETH</button>
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="setSymbol('DOGEUSDT', this)">DOGE</button>
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="setSymbol('BNBUSDT', this)">BNB</button>
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="setSymbol('SOLUSDT', this)">SOL</button>
                  </div>
                  <small class="text-muted">Selected: <span id="selectedSymbol">BTCUSDT</span></small>
                </div>

                <div class="btn-group w-100 mb-2">
                  <button type="button" class="btn" onclick="setAction('buy')" id="buyBtn"><i class="bi bi-arrow-up"></i> Buy</button>
                  <button type="button" class="btn" onclick="setAction('sell')" id="sellBtn"><i class="bi bi-arrow-down"></i> Sell</button>
                </div>
                <small class="text-muted">Action: <span id="selectedAction">BUY</span></small>

                <div class="form-group mt-3 mb-3">
                  <label>Entry Price</label>
                  <input type="text" id="entryPrice" class="form-control" readonly style="background:#f8fafc;">
                </div>

                <div class="form-group mb-3">
                  <label for="lotSize">Lot Size</label>
                  <input type="number" id="lotSize" name="lot" class="form-control" value="0.01" step="0.01" min="0.01">
                </div>

                <div class="form-group mb-3">
                  <label for="stopLoss">Stop Loss</label>
                  <input type="number" id="stopLoss" name="stopLoss" class="form-control" step="0.01">
                  <label for="takeProfit">Take Profit</label>
                  <input type="number" id="takeProfit" name="takeProfit" class="form-control" step="0.01">
                </div>

                <% if (tournamentStatus === 'RUNNING') { %>
                  <button type="submit" class="btn btn-primary w-100" id="submitBtn"><i class="bi bi-send"></i> Place Order</button>
                <% } else { %>
                  <div class="alert alert-warning text-center"><i class="bi bi-clock"></i> Trading unavailable</div>
                <% } %>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Open Positions + Recent Trades side by side -->
      <div class="row">
        <div class="col-6">
          <div class="card">
            <div class="card-header"><h5><i class="bi bi-list-ul"></i> Open Positions</h5></div>
            <div class="card-body"><div id="openPositions"><p class="text-muted text-center">Loading open positions...</p></div></div>
          </div>
        </div>
        <div class="col-6">
          <div class="card">
            <div class="card-header"><h5><i class="bi bi-clock-history"></i> Recent Trades</h5></div>
            <div class="card-body"><div id="recentTrades"><p class="text-muted text-center">Loading recent trades...</p></div></div>
          </div>
        </div>
      </div>

      <% } %>
    </div>
  </div>
  <!-- Modal: Close Position (Take partials) -->
  <div id="closePositionModal" class="modal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.3); z-index:9999; align-items:center; justify-content:center;">
    <div style="background:#222; color:#fff; padding:2rem; border-radius:12px; min-width:320px; max-width:90vw; margin:auto; box-shadow:0 8px 32px rgba(0,0,0,0.25);">
      <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:1rem;">
        <h5 style="margin:0;">Take partials</h5>
        <button onclick="closeCloseModal()" style="background:none; border:none; color:#fff; font-size:1.5rem;">&times;</button>
      </div>
      <div style="margin-bottom:1rem;">
        <label><input type="radio" name="closeMode" checked> Use left amount on Position</label>
        <label style="margin-left:1rem;"><input type="radio" name="closeMode"> Use original Position</label>
      </div>
      <div style="display:flex; gap:0.5rem; margin-bottom:1rem;">
        <button class="btn btn-outline-secondary btn-sm" onclick="setClosePercent(25)">25%</button>
        <button class="btn btn-outline-secondary btn-sm" onclick="setClosePercent(50)">50%</button>
        <button class="btn btn-outline-secondary btn-sm" onclick="setClosePercent(75)">75%</button>
        <button class="btn btn-primary btn-sm" onclick="setClosePercent(100)" id="closePercent100">100%</button>
      </div>
      <div style="display:flex; gap:1rem; margin-bottom:1rem;">
        <div style="flex:1;">
          <label>Percentage to close</label>
          <input type="number" id="closePercent" value="100" min="1" max="100" class="form-control" oninput="updateCloseAmount()">
        </div>
        <div style="flex:1;">
          <label>Amount to close</label>
          <input type="number" id="closeAmount" value="0.01" min="0.01" step="0.01" class="form-control" oninput="updateClosePercent()">
        </div>
      </div>
      <div style="margin-bottom:1rem;">
        <span>Current position size: <span id="closeCurrentSize">0.01 Coins</span></span>
      </div>
      <div style="margin-bottom:1rem;">
        <span>Realized PnL: <span id="closePnl">$0.00</span></span>
      </div>
      <div style="display:flex; gap:1rem; justify-content:flex-end;">
        <button class="btn btn-outline-secondary" onclick="closeCloseModal()">Discard</button>
        <button class="btn btn-primary" onclick="saveClosePosition()">Save</button>
      </div>
    </div>
  </div>
  <!-- Modal: Edit SL/TP -->
  <div id="editPositionModal" class="modal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.3); z-index:9999; align-items:center; justify-content:center;">
    <div style="background:var(--bg-primary); color:var(--text-primary); padding:2rem; border-radius:12px; min-width:320px; max-width:90vw; margin:auto; box-shadow:0 8px 32px rgba(0,0,0,0.25);">
      <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:1rem;">
        <h5 style="margin:0; color:var(--primary-color);">Edit Stop Loss / Take Profit</h5>
        <button onclick="closeEditModal()" style="background:none; border:none; color:var(--text-primary); font-size:1.5rem;">&times;</button>
      </div>
      <div style="margin-bottom:1rem;">
        <label>Stop Loss</label>
        <input type="number" id="editStopLoss" class="form-control" step="0.00001" placeholder="Stop Loss">
      </div>
      <div style="margin-bottom:1rem;">
        <label>Take Profit</label>
        <input type="number" id="editTakeProfit" class="form-control" step="0.00001" placeholder="Take Profit">
      </div>
      <div style="display:flex; gap:1rem; justify-content:flex-end;">
        <button class="btn btn-secondary" onclick="closeEditModal()">Discard</button>
        <button class="btn btn-primary" onclick="saveEditPosition()">Save</button>
      </div>
      <input type="hidden" id="editPositionId">
    </div>
  </div>
<script>
// ====== ดึง Balance ปัจจุบันจาก backend แล้วอัปเดต DOM ======
async function refreshBalance() {
  try {
    const tournamentId = document.body.dataset.tournamentId;
    if (!tournamentId) return;

    const res = await fetch(`/api/user/balance?tournamentId=${tournamentId}`);
    const data = await res.json();

    if (data.success && typeof data.balance !== 'undefined') {
      const balanceText = document.querySelector('.card-header small.text-muted');
      if (balanceText) {
        balanceText.textContent = `Balance: $${Number(data.balance).toLocaleString('en-US', {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        })}`;
      }
    }
  } catch (err) {
    console.warn('⚠️ Balance refresh failed:', err.message);
  }
}

  // ====== ตัวแปรหลัก ======
  let currentAction = 'buy';
  let currentSymbol = document.getElementById('symbolInput').value || 'BTCUSDT';
  let lastPrice = null;
  let priceTimer = null;

  // ====== Action ======
  function setAction(action) {
    currentAction = action;
    document.getElementById('selectedAction').textContent = action.toUpperCase();
    document.getElementById('buyBtn').classList.toggle('btn-success', action === 'buy');
    document.getElementById('sellBtn').classList.toggle('btn-danger', action === 'sell');
  }

  // ====== Symbol ======
  function setSymbol(symbol, btn) {
    currentSymbol = symbol;
    document.getElementById('symbolInput').value = symbol;
    document.getElementById('selectedSymbol').textContent = symbol;
    document.querySelectorAll('.btn-outline-primary').forEach(b => b.classList.remove('active'));
    if (btn) btn.classList.add('active');
    initChart();
    refreshPrice();
  }

  // ====== Price ======
  async function fetchCurrentPrice(symbol) {
    const res = await fetch(`/api/price?symbol=${encodeURIComponent(symbol)}`);
    const data = await res.json();
    if (data && data.price) return data.price;
    return null;
  }

  async function refreshPrice() {
    try {
      const p = await fetchCurrentPrice(currentSymbol);
      if (p) {
        lastPrice = p;
        const entryEl = document.getElementById('entryPrice');
        if (entryEl) entryEl.value = p;
      }
    } catch (e) {}
  }

  function startPricePolling() {
    if (priceTimer) clearInterval(priceTimer);
    priceTimer = setInterval(refreshPrice, 3000);
  }

  // ====== Chart ======
  function initChart() {
    const chartDiv = document.getElementById('dynamic-graph');
    if (!chartDiv) return;
    chartDiv.innerHTML = '';
    new TradingView.widget({
      container_id: 'dynamic-graph',
      autosize: true,
      symbol: currentSymbol,
      interval: '1',
      timezone: 'Asia/Bangkok',
      style: 1,
      locale: 'en',
      toolbar_bg: '#f8fafc',
      enable_publishing: false,
      hide_legend: false,
      allow_symbol_change: false
    });
  }

// ====== Recent Trades ======
async function loadRecentTrades() {
  try {
    const tournamentId = '<%= tournament ? tournament._id : "" %>';
    if (!tournamentId) return;

    const res = await fetch(`/api/trade/recent?tournamentId=${tournamentId}`);
    const data = await res.json();
    const recentTradesDiv = document.getElementById('recentTrades');

    if (data.success && data.trades && data.trades.length) {
      // ✅ แยกส่วน OPEN / CLOSED
      const openTrades = data.trades.filter(t => t.status === 'OPEN');
      const closedTrades = data.trades.filter(t => t.status === 'CLOSED');

      let html = '';

      if (openTrades.length) {
        html += `<h6 class="text-primary mb-2"><i class="bi bi-play-circle"></i> Open Positions</h6>`;
        html += openTrades.map(trade => {
          const badgeClass = trade.action === 'buy' ? 'badge-primary' : 'badge-warning';
          const actionText = trade.action.toUpperCase();
          const timeText = new Date(trade.createdAt).toLocaleTimeString();
          return `
            <div class="trade-item">
              <div class="d-flex justify-content-between align-items-center">
                <span class="badge ${badgeClass}">${actionText} (OPEN)</span>
                <small>${timeText}</small>
              </div>
              <div>${trade.symbol} | Lot: ${trade.lot} | Entry: ${trade.entryPrice}</div>
            </div>
          `;
        }).join('');
      }

      if (closedTrades.length) {
        html += `<h6 class="text-muted mt-3 mb-2"><i class="bi bi-check-circle"></i> Closed Trades</h6>`;
        html += closedTrades.map(trade => {
          const isBuy = trade.action === 'close-buy';
          const badgeClass = isBuy ? 'badge-success' : 'badge-danger';
          const actionText = trade.action.toUpperCase();
          const timeText = new Date(trade.closedAt).toLocaleTimeString();
          return `
            <div class="trade-item">
              <div class="d-flex justify-content-between align-items-center">
                <span class="badge ${badgeClass}">${actionText}</span>
                <small>${timeText}</small>
              </div>
              <div>${trade.symbol} | Lot: ${trade.lot} | Score: ${Number(trade.score).toFixed(2)}</div>
            </div>
          `;
        }).join('');
      }

      recentTradesDiv.innerHTML = html;
    } else {
      recentTradesDiv.innerHTML = '<p class="text-muted text-center">No recent trades</p>';
    }
  } catch (err) {
    document.getElementById('recentTrades').innerHTML = '<p class="text-danger text-center">Error loading trades</p>';
    console.error('Recent trades error:', err.message);
  }
}

  // ====== Open Positions ======
async function loadOpenPositions() {
  try {
    const tournamentId = '<%= tournament ? tournament._id : "" %>';
    if (!tournamentId) return;

    const res = await fetch(`/api/trade/positions?tournamentId=${tournamentId}`);
    const data = await res.json();
    const box = document.getElementById('openPositions');

    if (data.success && data.positions && data.positions.length) {
      // ✅ ดึงราคาปัจจุบันทั้งหมดก่อน (batch)
      const priceRes = await fetch('https://api.binance.com/api/v3/ticker/price');
      const allPrices = await priceRes.json();

      box.innerHTML = data.positions.map(position => {
        const entry = Number(position.entryPrice);
        const found = allPrices.find(p => p.symbol === position.symbol.toUpperCase());
        const currentPrice = found ? Number(found.price) : entry;
        
        // ✅ คำนวณกำไร/ขาดทุนตอนนั้น
        let pnl = 0;
        if (position.action === 'buy') {
          pnl = (currentPrice - entry) * position.lot;
        } else if (position.action === 'sell') {
          pnl = (entry - currentPrice) * position.lot;
        }

        const pnlColor = pnl >= 0 ? 'text-success' : 'text-danger';
        const pnlLabel = pnl >= 0 ? 'Profit' : 'Loss';

        return `
          <div class="position-item">
            <div class="d-flex justify-content-between align-items-center">
              <span class="badge badge-${position.action === 'buy' ? 'success' : 'danger'}">${(position.action||'').toUpperCase()}</span>
              <small>${new Date(position.createdAt).toLocaleTimeString()}</small>
            </div>
            <div>
              Lot: ${position.lot} | 
              Entry: ${entry.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} |
              <span id="pnl-${position._id}" class="${pnlColor}">${pnlLabel}: ${pnl.toFixed(2)}</span>
              ${position.stopLoss ? `| SL: ${Number(position.stopLoss).toLocaleString('en-US', { minimumFractionDigits: 2 })}` : ''} 
              ${position.takeProfit ? `| TP: ${Number(position.takeProfit).toLocaleString('en-US', { minimumFractionDigits: 2 })}` : ''}
            </div>

            <div class="d-flex gap-2 mt-2">
              <button class="btn btn-theme-edit btn-sm" onclick="showEditModal('${position._id}', ${position.lot}, ${position.stopLoss || 'null'}, ${position.takeProfit || 'null'})">Edit</button>
              <button class="btn btn-theme-close btn-sm" onclick="showCloseModal('${position._id}', ${position.lot})">Close</button>
            </div>
          </div>
        `;
      }).join('');
    } else {
      box.innerHTML = '<p class="text-muted text-center">No open positions</p>';
    }
  } catch (err) {
    console.error('Open positions error:', err);
    document.getElementById('openPositions').innerHTML = '<p class="text-danger text-center">Error loading positions</p>';
  }
}

// ====== Update Real-Time PnL ======
async function updateRealtimePnL() {
  try {
    const priceRes = await fetch('https://api.binance.com/api/v3/ticker/price');
    const allPrices = await priceRes.json();

    // ดึงข้อมูล position ปัจจุบันจาก DOM (ที่ render ล่าสุด)
    const tournamentId = '<%= tournament ? tournament._id : "" %>';
    if (!tournamentId) return;
    const res = await fetch(`/api/trade/positions?tournamentId=${tournamentId}`);
    const data = await res.json();
    if (!data.success || !data.positions) return;

    data.positions.forEach(pos => {
      const entry = Number(pos.entryPrice);
      const found = allPrices.find(p => p.symbol === pos.symbol.toUpperCase());
      const current = found ? Number(found.price) : entry;
      let pnl = 0;

      if (pos.action === 'buy') pnl = (current - entry) * pos.lot;
      else if (pos.action === 'sell') pnl = (entry - current) * pos.lot;

      const pnlSpan = document.getElementById(`pnl-${pos._id}`);
      if (pnlSpan) {
        pnlSpan.textContent = `${pnl >= 0 ? 'Profit' : 'Loss'}: ${pnl.toFixed(2)}`;
        pnlSpan.className = pnl >= 0 ? 'text-success' : 'text-danger';
      }
    });
  } catch (err) {
    console.warn('⚠️ Realtime PnL update failed:', err.message);
  }
}

  // ====== Tournament Time ======
  function updateTimeLeft() {
    const tournamentEnd = new Date('<%= tournament ? tournament.end : "" %>');
    const now = new Date();
    const timeLeftElement = document.getElementById('timeLeft');
    if (tournamentEnd && tournamentEnd > now && timeLeftElement) {
      const diff = tournamentEnd - now;
      const d = Math.floor(diff / (1000*60*60*24));
      const h = Math.floor((diff % (1000*60*60*24)) / (1000*60*60));
      const m = Math.floor((diff % (1000*60*60)) / (1000*60));
      const s = Math.floor((diff % (1000*60)) / 1000);
      timeLeftElement.textContent = `${d>0?d+'d ':''}${h>0?h+'h ':''}${m>0?m+'m ':''}${s}s`;
    } else if (timeLeftElement) {
      timeLeftElement.textContent = 'Tournament Ended';
    }
  }

  // ====== DOM Ready ======
  document.addEventListener('DOMContentLoaded', async () => {
    setAction('buy');
    initChart();
    await refreshPrice();
    startPricePolling();

    loadRecentTrades();
    loadOpenPositions();
    updateTimeLeft();
    // อัปเดตข้อมูล (price, trade, position) ทุก 5 วิ
    setInterval(() => {
      loadRecentTrades();
      loadOpenPositions();
    }, 5000);

    // อัปเดตเวลา (นับถอยหลัง) ทุก 1 วิ
    setInterval(updateTimeLeft, 1000);

    // ====== Submit Trade ======
    const tradeForm = document.getElementById('tradeForm');
    if (tradeForm) {
      tradeForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        await refreshPrice();
        const priceToUse = lastPrice;
        if (!priceToUse) {
          return alert('Cannot fetch current price. Please try again.');
        }
        const body = {
          tournamentId: document.body.dataset.tournamentId,
          symbol: currentSymbol,
          action: currentAction,
          type: 'market',
          lot: document.getElementById('lotSize').value,
          entryPrice: priceToUse,
          stopLoss: document.getElementById('stopLoss').value || null,
          takeProfit: document.getElementById('takeProfit').value || null
        };

        const btn = document.getElementById('submitBtn');
        const old = btn.innerHTML;
        btn.disabled = true;
        btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Placing Order...';

        try {
          const res = await fetch('/api/trade', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
          });
          const data = await res.json();
          if (res.ok && data.success && data.position) {
            alert(`✅ Order placed!\nAction: ${data.position.action}\nLot: ${data.position.lot}`);
            // โหลดข้อมูลใหม่โดยไม่ต้องรีหน้า
            loadOpenPositions();
            loadRecentTrades();
            refreshBalance();
          } else {
            alert('❌ Error placing order: ' + (data.error || 'Unknown error'));
          }
        } catch (err) {
          alert('Error placing order: ' + err.message);
        } finally {
          btn.disabled = false;
          btn.innerHTML = old;
        }
      });
    }
  });

  // ====== Edit/Close Modal ======
  function showEditModal(positionId, lot, stopLoss, takeProfit) {
    document.getElementById('editPositionId').value = positionId;
    document.getElementById('editStopLoss').value = stopLoss && stopLoss !== 'null' ? stopLoss : '';
    document.getElementById('editTakeProfit').value = takeProfit && takeProfit !== 'null' ? takeProfit : '';
    document.getElementById('editPositionModal').style.display = 'flex';
  }
  function closeEditModal() {
    document.getElementById('editPositionModal').style.display = 'none';
  }
  async function saveEditPosition() {
    const positionId = document.getElementById('editPositionId').value;
    const stopLoss = document.getElementById('editStopLoss').value;
    const takeProfit = document.getElementById('editTakeProfit').value;
    try {
      await fetch('/api/trade/edit-position', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ positionId, stopLoss, takeProfit })
      });
      closeEditModal();
      loadOpenPositions();
    } catch {
      alert('Error saving position');
    }
  }

  let closePositionId = null;
  let closeCurrentLot = 0;
  function showCloseModal(positionId, lot) {
    closePositionId = positionId;
    closeCurrentLot = lot;
    document.getElementById('closePercent').value = 100;
    document.getElementById('closeAmount').value = lot;
    document.getElementById('closeCurrentSize').textContent = lot;
    document.getElementById('closePnl').textContent = '$0.00';
    document.getElementById('closePositionModal').style.display = 'flex';
  }
  function closeCloseModal() {
    document.getElementById('closePositionModal').style.display = 'none';
  }
  function setClosePercent(percent) {
    document.getElementById('closePercent').value = percent;
    updateCloseAmount();
  }
  function updateCloseAmount() {
    const percent = parseFloat(document.getElementById('closePercent').value);
    const amount = (closeCurrentLot * percent / 100).toFixed(2);
    document.getElementById('closeAmount').value = amount;
  }
  function updateClosePercent() {
    const amount = parseFloat(document.getElementById('closeAmount').value);
    const percent = Math.min(100, Math.max(1, (amount / closeCurrentLot) * 100));
    document.getElementById('closePercent').value = percent.toFixed(0);
  }
async function saveClosePosition() {
  await refreshPrice();
  let closePrice = lastPrice;
  if (!closePrice || closePrice === 0) {
    console.warn('⚠️ Price API failed, using entry price as fallback');
    const pos = await fetch(`/api/trade/positions?tournamentId=${document.body.dataset.tournamentId}`)
      .then(res => res.json());
    const found = pos.positions.find(p => p._id === closePositionId);
    if (found) closePrice = found.entryPrice;
  }

  const lotToClose = parseFloat(document.getElementById('closeAmount').value);
  if (!closePositionId || !lotToClose || lotToClose <= 0)
    return alert('Invalid close data');

  try {
    const res = await fetch('/api/close-position', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ positionId: closePositionId, lotToClose, closePrice })
    });
    const data = await res.json();
    if (data.success) {
      alert(`✅ Closed!\nPnL: ${data.pnl}\nScore: ${data.score}`);
      closeCloseModal();
      loadOpenPositions();
      loadRecentTrades();
      refreshBalance();
    } else alert('❌ ' + data.error);
  } catch (err) {
    alert('❌ Close error: ' + err.message);
  }
}
  // ✅ เริ่มอัปเดตกำไร/ขาดทุนเรียลไทม์ทุก 1 วินาที
  setInterval(updateRealtimePnL,1000);
</script>
</body>
</html>